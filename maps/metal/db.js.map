{"version":3,"sources":["metal/db.coffee"],"names":[],"mappings":"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","file":"metal/db.js","sourceRoot":"/source/","sourcesContent":["\nPromise = require \"bluebird\"\nDatastore = require \"nedb\"\nmkdirp = require \"mkdirp\"\npath = require \"path\"\napp = require \"app\"\n_ = require \"underscore\"\n\nlibrary_dir = path.join(app.getPath(\"home\"), \"Downloads\", \"itch.io\")\nmkdirp.sync(library_dir)\n\nstore = new Datastore {\n  filename: path.join(library_dir, \"db.dat\")\n  autoload: true\n}\n\n# returns true if field name looks like a date field\nis_date = (name) ->\n  /_at$/.test name\n\n# parse date returned by itch.io API, make a Javascript Date object out of it\n# assumes UTC, throws on parsing error\nto_date = (text) ->\n  [ meh, year, month, day, hour, min, sec ] = text.match /^(\\d+)-(\\d+)-(\\d+) (\\d+):(\\d+):(\\d+)(\\.\\d*)?$/ or\n    throw new Error(\"Invalid date: #{text}\")\n  new Date(Date.UTC year, month - 1, day, hour, min, sec)\n\ninsert = Promise.promisify(store.insert, store)\nupdate = Promise.promisify(store.update, store)\nfind = Promise.promisify(store.find, store)\nfindOne = Promise.promisify(store.findOne, store)\n\nsave_download_keys = (keys) ->\n  return Promise.resolve() unless keys.length\n\n  games = []\n  promises = for key in keys\n    record = { _table: 'download_keys' }\n    for name, field of key\n      switch\n        when typeof(field) == 'object'\n          switch name\n            when 'game'\n              record.game_id = field.id\n              games.push field\n        when is_date name\n          record[name] = to_date field\n        else\n          record[name] = field\n\n    update {\n      _table: 'download_keys'\n      id: key.id\n    }, record, { upsert: true }\n\n  promises.push save_games games\n  Promise.all promises\n\nsave_users = (users) ->\n  return Promise.resolve() unless users.length\n  \n  promises = for user in users\n    record = { _table: 'users' }\n    for name, field of user\n      switch\n        when typeof(field) == 'object'\n          continue\n        when is_date name\n          record[name] = to_date field\n        else\n          record[name] = field\n    update {\n      _table: 'users'\n      id: user.id\n    }, record, { upsert: true }\n\n  Promise.all promises\n\nsave_games = (games) ->\n  return unless games.length\n\n  users = []\n  keys = []\n\n  promises = for game in games\n    record = { _table: 'games' }\n    for name, field of game\n      switch\n        when typeof(field) == 'object'\n          switch name\n            when \"key\"\n              keys.push field\n            when \"user\"\n              users.push field\n              record.user_id = field.id\n        when is_date name\n          record[name] = to_date field\n        else\n          record[name] = field\n\n    update {\n      _table: 'games'\n      id: record.id\n    }, record, { upsert: true }\n\n  promises.push save_users users\n  promises.push save_download_keys keys\n  Promise.all promises\n\nsave_collections = (collections) ->\n  return unless collections.length\n\n  games = []\n\n  promises = for collection in collections\n    record = { _table: 'collections' }\n    for name, field of collection\n      switch\n        when typeof(field) == 'object'\n          switch name\n            when \"games\"\n              record.game_ids = _.pluck field, 'id'\n              games = games.concat(field)\n        when is_date name\n          record[name] = to_date field\n        else\n          record[name] = field\n\n    update {\n      _table: 'collections'\n      id: collection.id\n    }, record, { upsert: true }\n\n  promises.push save_games games\n  Promise.all promises\n\nmodule.exports = {\n  store\n  save_download_keys\n  save_users\n  save_games\n  save_collections\n  insert\n  update\n  find\n  findOne\n}\n\n"]}