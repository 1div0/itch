{"version":3,"sources":["metal/configurators/linux.coffee"],"names":[],"mappings":"AACA;AAAA,MAAA;;EAAA,OAAA,GAAU,OAAA,CAAQ,UAAR;;EAEV,IAAA,GAAO,OAAA,CAAQ,MAAR;;EAEP,CAAA,GAAI,OAAA,CAAQ,YAAR;;EAEJ,EAAA,GAAK,OAAO,CAAC,YAAR,CAAqB,OAAA,CAAQ,IAAR,CAArB;;EACL,IAAA,GAAO,OAAO,CAAC,SAAR,CAAkB,OAAA,CAAQ,MAAR,CAAlB;;EACP,UAAA,GAAa,OAAO,CAAC,SAAR,CAAkB,OAAA,CAAQ,YAAR,CAAlB;;EAEb,GAAA,GAAM,SAAC,GAAD;WAAS,OAAO,CAAC,GAAR,CAAY,wBAAA,GAAyB,GAArC;EAAT;;EAEN,YAAA,GAAe,SAAC,GAAD;AACb,YAAA,KAAA;AAAA,aAGO,GAAI,CAAA,CAAA,CAAJ,KAAU,IAAV,IAAkB,GAAI,CAAA,CAAA,CAAJ,KAAU,IAA5B,IAAoC,GAAI,CAAA,CAAA,CAAJ,KAAU,IAA9C,IAAsD,GAAI,CAAA,CAAA,CAAJ,KAAU,KAHvE;eAII;AAJJ,aAOO,GAAI,CAAA,CAAA,CAAJ,KAAU,IAAV,IAAkB,GAAI,CAAA,CAAA,CAAJ,KAAU,KAPnC;eAQI;AARJ;EADa;;EAYf,kBAAA,GAAqB,SAAC,QAAD;WAEnB,IAAA,CAAQ,QAAD,GAAU,OAAjB,EAAyB;MAAA,KAAA,EAAO,IAAP;KAAzB,CAAqC,CAAC,IAAtC,CAA2C,SAAC,SAAD;aACvC,GAAA,CAAI,UAAA,GAAW,SAAS,CAAC,MAArB,GAA4B,wBAAhC;IADuC,CAA3C,CAEC,CAAC,GAFF,CAEM,SAAC,IAAD;aACF,UAAA,CAAW,IAAX,EAAiB,CAAjB,EAAoB,CAApB,CAAsB,CAAC,IAAvB,CAA4B,YAA5B,CAAyC,CAAC,IAA1C,CAA+C,SAAC,MAAD;AAC7C,YAAA;QAAA,IAAA,CAAmB,MAAnB;AAAA,iBAAO,KAAP;;QACA,UAAA,GAAa,IAAI,CAAC,QAAL,CAAc,QAAd,EAAwB,IAAxB;QACb,GAAA,CAAO,UAAD,GAAY,gBAAZ,GAA4B,MAA5B,GAAmC,aAAzC;eACA,EAAE,CAAC,UAAH,CAAc,IAAd,EAAoB,KAApB,CAA0B,CAAC,IAA3B,CAAgC,SAAA;iBAC9B;QAD8B,CAAhC;MAJ6C,CAA/C;IADE,CAFN,EAUE;MAAA,WAAA,EAAa,CAAb;KAVF,CAUiB,CAAC,MAVlB,CAUyB,SAAC,CAAD;aAAO;IAAP,CAVzB;EAFmB;;EAcrB,SAAA,GAAY,SAAC,QAAD;WACV,kBAAA,CAAmB,QAAnB,CAA4B,CAAC,IAA7B,CAAkC,SAAC,WAAD;aAChC;QAAE,aAAA,WAAF;;IADgC,CAAlC;EADU;;EAKZ,MAAM,CAAC,OAAP,GAAiB;IAAE,WAAA,SAAF;;AA3CjB","file":"metal/configurators/linux.js","sourceRoot":"/source/","sourcesContent":["\nPromise = require \"bluebird\"\n\npath = require \"path\"\n\n_ = require \"underscore\"\n\nfs = Promise.promisifyAll require \"fs\"\nglob = Promise.promisify require \"glob\"\nread_chunk = Promise.promisify require \"read-chunk\"\n\nlog = (msg) -> console.log \"[configurators/linux] #{msg}\"\n\nsniff_format = (buf) ->\n  switch\n    # ELF executables start with 0x7F454C46\n    # (e.g. 0x7F + 'ELF' in ASCII)\n    when buf[0] == 0x7F && buf[1] == 0x45 && buf[2] == 0x4C && buf[3] == 0x46\n      'elf executable'\n\n    # Shell scripts start with an interro-bang\n    when buf[0] == 0x23 && buf[1] == 0x21\n      'shell script'\n\n# TODO: refactor + better error handling\nfind_and_fix_execs = (app_path) ->\n\n  glob(\"#{app_path}/**/*\", nodir: true).then((all_files) ->\n      log \"Probing #{all_files.length} files for executables\"\n  ).map((file) ->\n      read_chunk(file, 0, 8).then(sniff_format).then((format) ->\n        return null unless format\n        short_path = path.relative(app_path, file)\n        log \"#{short_path} looks like a #{format}, +x'ing it\"\n        fs.chmodAsync(file, 0o777).then ->\n          file\n      )\n  , concurrency: 4).filter (x) -> x?\n\nconfigure = (app_path) ->\n  find_and_fix_execs(app_path).then((executables) ->\n    { executables }\n  )\n\nmodule.exports = { configure }\n\n"]}