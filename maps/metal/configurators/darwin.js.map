{"version":3,"sources":["metal/configurators/darwin.coffee"],"names":[],"mappings":"AACA;AAAA,MAAA;;EAAA,OAAA,GAAU,OAAA,CAAQ,UAAR;;EAEV,IAAA,GAAO,OAAA,CAAQ,MAAR;;EAEP,CAAA,GAAI,OAAA,CAAQ,YAAR;;EAEJ,EAAA,GAAK,OAAO,CAAC,YAAR,CAAqB,OAAA,CAAQ,IAAR,CAArB;;EACL,IAAA,GAAO,OAAO,CAAC,SAAR,CAAkB,OAAA,CAAQ,MAAR,CAAlB;;EACP,UAAA,GAAa,OAAO,CAAC,SAAR,CAAkB,OAAA,CAAQ,YAAR,CAAlB;;EAEb,GAAA,GAAM,SAAC,GAAD;WAAS,OAAO,CAAC,GAAR,CAAY,yBAAA,GAA0B,GAAtC;EAAT;;EAKN,SAAA,GAAY,SAAC,YAAD,EAAe,QAAf;WACV,YAAY,CAAC,MAAb,CAAoB,SAAC,IAAD;aAClB,CAAC,WAAW,CAAC,IAAZ,CAAiB,IAAI,CAAC,QAAL,CAAc,QAAd,EAAwB,IAAxB,CAAjB;IADiB,CAApB;EADU;;EAKZ,YAAA,GAAe,SAAC,GAAD;AACb,YAAA,KAAA;AAAA,aAGO,GAAI,CAAA,CAAA,CAAJ,KAAU,IAAV,IAAkB,GAAI,CAAA,CAAA,CAAJ,KAAU,IAA5B,IAAoC,GAAI,CAAA,CAAA,CAAJ,KAAU,IAA9C,IAAsD,GAAI,CAAA,CAAA,CAAJ,KAAU,KAHvE;eAII;AAJJ,aAOO,GAAI,CAAA,CAAA,CAAJ,KAAU,IAAV,IAAkB,GAAI,CAAA,CAAA,CAAJ,KAAU,KAPnC;eAQI;AARJ;EADa;;EAYf,eAAA,GAAkB,SAAC,WAAD;WAEhB,IAAA,CAAQ,WAAD,GAAa,OAApB,EAA4B;MAAA,KAAA,EAAO,IAAP;KAA5B,CAAwC,CAAC,IAAzC,CAA8C,SAAC,SAAD;MAC1C,GAAA,CAAI,UAAA,GAAW,SAAS,CAAC,MAArB,GAA4B,wBAAhC;aACA;IAF0C,CAA9C,CAGC,CAAC,GAHF,CAGM,SAAC,IAAD;aACF,UAAA,CAAW,IAAX,EAAiB,CAAjB,EAAoB,CAApB,CAAsB,CAAC,IAAvB,CAA4B,YAA5B,CAAyC,CAAC,IAA1C,CAA+C,SAAC,MAAD;AAC7C,YAAA;QAAA,IAAA,CAAc,MAAd;AAAA,iBAAA;;QACA,UAAA,GAAa,IAAI,CAAC,QAAL,CAAc,WAAd,EAA2B,IAA3B;QACb,GAAA,CAAO,UAAD,GAAY,gBAAZ,GAA4B,MAA5B,GAAmC,aAAzC;eACA,EAAE,CAAC,UAAH,CAAc,IAAd,EAAoB,KAApB;MAJ6C,CAA/C;IADE,CAHN,EAUE;MAAA,WAAA,EAAa,CAAb;KAVF,CAUiB,CAAC,IAVlB,CAUuB,SAAA;aAAG;IAAH,CAVvB;EAFgB;;EAclB,SAAA,GAAY,SAAC,QAAD;WACV,IAAA,CAAQ,QAAD,GAAU,YAAjB,CAA6B,CAAC,IAA9B,CAAmC,SAAC,YAAD;aACjC,SAAA,CAAU,YAAV,EAAwB,QAAxB;IADiC,CAAnC,CAEC,CAAC,IAFF,CAEO,SAAC,YAAD;aACL,OAAO,CAAC,GAAR,CAAY,YAAY,CAAC,GAAb,CAAiB,eAAjB,CAAZ;IADK,CAFP,CAIC,CAAC,IAJF,CAIO,SAAC,WAAD;aACL;QAAE,aAAA,WAAF;;IADK,CAJP;EADU;;EASZ,MAAM,CAAC,OAAP,GAAiB;IAAE,WAAA,SAAF;;AAvDjB","file":"metal/configurators/darwin.js","sourceRoot":"/source/","sourcesContent":["\nPromise = require \"bluebird\"\n\npath = require \"path\"\n\n_ = require \"underscore\"\n\nfs = Promise.promisifyAll require \"fs\"\nglob = Promise.promisify require \"glob\"\nread_chunk = Promise.promisify require \"read-chunk\"\n\nlog = (msg) -> console.log \"[configurators/darwin] #{msg}\"\n\n# skip some typical junk we find in archives that's supposed\n# to be hidden / in trash / isn't in anyway relevant to what\n# we're trying to do\nskip_junk = (bundle_paths, app_path) ->\n  bundle_paths.filter((file) ->\n    !/^__MACOSX/.test(path.relative(app_path, file))\n  )\n\nsniff_format = (buf) ->\n  switch\n    # intel Mach-O executables start with 0xCEFAEDFE\n    # (old PowerPC Mach-O executables started with 0xFEEDFACE)\n    when buf[0] == 0xCE && buf[1] == 0xFA && buf[2] == 0xED && buf[3] == 0xFE\n      'mach-o executable'\n\n    # Shell-script start with an interro-bang\n    when buf[0] == 0x23 && buf[1] == 0x21\n      'shell script'\n\n# TODO: refactor + better error handling\nfix_permissions = (bundle_path) ->\n\n  glob(\"#{bundle_path}/**/*\", nodir: true).then((all_files) ->\n      log \"Probing #{all_files.length} files for executables\"\n      all_files\n  ).map((file) ->\n      read_chunk(file, 0, 8).then(sniff_format).then((format) ->\n        return unless format\n        short_path = path.relative(bundle_path, file)\n        log \"#{short_path} looks like a #{format}, +x'ing it\"\n        fs.chmodAsync file, 0o777\n      )\n  , concurrency: 4).then -> bundle_path\n\nconfigure = (app_path) ->\n  glob(\"#{app_path}/**/*.app/\").then((bundle_paths) ->\n    skip_junk bundle_paths, app_path\n  ).then((bundle_paths) ->\n    Promise.all bundle_paths.map fix_permissions\n  ).then((executables) ->\n    { executables }\n  )\n\nmodule.exports = { configure }\n\n"]}