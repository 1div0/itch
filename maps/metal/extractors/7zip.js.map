{"version":3,"sources":["metal/extractors/7zip.coffee"],"names":[],"mappings":"AACA;AAAA,MAAA;;EAAA,OAAA,GAAU,OAAA,CAAQ,UAAR;;EACV,IAAA,GAAO,OAAO,CAAC,SAAR,CAAkB,OAAA,CAAQ,MAAR,CAAlB;;EACP,EAAA,GAAK,OAAO,CAAC,YAAR,CAAqB,OAAA,CAAQ,IAAR,CAArB;;EACL,SAAA,GAAY,OAAA,CAAQ,WAAR;;EACZ,UAAA,GAAa,OAAA,CAAQ,YAAR;;EACb,IAAA,GAAO,OAAA,CAAQ,MAAR;;EACP,QAAA,GAAW,OAAA,CAAQ,SAAR;;EACX,QAAA,GAAW,OAAA,CAAQ,eAAR;;AAQX,UAAO,OAAO,CAAC,QAAf;AAAA,SACO,QADP;MAEI,OAAO,CAAC,GAAG,CAAC,IAAZ,IAAoB;AAFxB;;EAIA,SAAA,GAAY,SAAC,CAAD;WACV,IAAI,CAAC,SAAL,CAAe,CAAC,CAAC,OAAF,CAAU,QAAV,EAAoB,EAApB,CAAf;EADU;;EAGZ,MAAA,GAAS,SAAC,IAAD;AACP,QAAA;0EAAwC,CAAE,aAA1C,KAAiD;EAD1C;;EAGT,YAAA,GAAe;;EAEf,OAAA,GAAU,SAAC,YAAD,EAAe,SAAf;AACR,QAAA;IAAA,OAAO,CAAC,GAAR,CAAY,sBAAA,GAAuB,YAAvB,GAAoC,QAApC,GAA4C,SAA5C,GAAsD,cAAlE;IAEA,EAAA,GAAS,IAAA,QAAA,CAAA,CAAU,CAAC,IAAX,CAAgB,YAAhB;IAET,KAAA,GAAQ;IACR,UAAA,GAAa;IACb,cAAA,GAAiB;IAEjB,QAAA,GAAW;MACT,UAAA,EAAY,IADH;;IAIX,EAAE,CAAC,QAAH,CAAY,SAAC,KAAD;AACV,UAAA;MAAA,IAAsD,YAAtD;QAAA,OAAO,CAAC,GAAR,CAAY,iBAAA,GAAkB,KAAK,CAAC,MAAxB,GAA+B,QAA3C,EAAA;;AACA;WAAA,uCAAA;;QACE,UAAA,IAAc,CAAC,CAAC;QAChB,KAAA,GAAQ,SAAA,CAAU,CAAC,CAAC,IAAZ;QACR,KAAM,CAAA,KAAA,CAAN,GAAe,CAAC,CAAC;QACjB,IAA4C,YAA5C;uBAAA,OAAO,CAAC,GAAR,CAAe,KAAD,GAAO,IAAP,GAAW,CAAC,CAAC,IAAb,GAAkB,SAAhC,GAAA;SAAA,MAAA;+BAAA;;AAJF;;IAFU,CAAZ;IASA,CAAA,GAAI,EAAE,CAAC,IAAH,CAAQ,SAAC,IAAD;AACV,UAAA;MAAA,OAAO,CAAC,GAAR,CAAY,wBAAA,GAAyB,UAArC;MAGA,EAAA,GAAS,IAAA,QAAA,CAAA,CAAU,CAAC,WAAX,CAAuB,YAAvB,EAAqC,SAArC;MACT,EAAE,CAAC,QAAH,CAAY,SAAC,KAAD;AACV,YAAA;QAAA,IAA0D,YAA1D;UAAA,OAAO,CAAC,GAAR,CAAY,qBAAA,GAAsB,KAAK,CAAC,MAA5B,GAAmC,QAA/C,EAAA;;AACA,aAAA,uCAAA;;UACE,KAAA,GAAQ,SAAA,CAAU,CAAV;UACR,IAAG,IAAA,GAAO,KAAM,CAAA,KAAA,CAAhB;YACE,cAAA,IAAkB;YAClB,IAA0C,YAA1C;cAAA,OAAO,CAAC,GAAR,CAAe,KAAD,GAAO,IAAP,GAAW,IAAX,GAAgB,SAA9B,EAAA;aAFF;WAAA,MAAA;YAIE,IAA2C,YAA3C;cAAA,OAAO,CAAC,GAAR,CAAe,KAAD,GAAO,mBAArB,EAAA;aAJF;;AAFF;QAOA,OAAA,GAAU,IAAI,CAAC,KAAL,CAAW,cAAA,GAAiB,UAAjB,GAA8B,GAAzC;QACV,OAAO,CAAC,GAAR,CAAY,sBAAA,GAAsB,CAAC,QAAQ,CAAC,QAAT,CAAkB,cAAlB,CAAD,CAAtB,GAAwD,MAAxD,GAA6D,CAAC,QAAQ,CAAC,QAAT,CAAkB,UAAlB,CAAD,CAA7D,GAA2F,WAA3F,GAAsG,OAAtG,GAA8G,GAA1H;2DACA,QAAQ,CAAC,WAAY;UACnB,gBAAA,cADmB;UAEnB,YAAA,UAFmB;UAGnB,SAAA,OAHmB;;MAXX,CAAZ;aAkBA;IAvBU,CAAR,CAwBH,CAAC,IAxBE,CAwBG,SAAA;aACL,IAAA,CAAQ,SAAD,GAAW,OAAlB,EAA0B;QAAA,KAAA,EAAO,IAAP;OAA1B;IADK,CAxBH,CA0BH,CAAC,IA1BE,CA0BG,SAAC,KAAD;AACL,UAAA;MAAA,IAAG,KAAK,CAAC,MAAN,KAAgB,CAAhB,IAAsB,MAAA,CAAO,KAAM,CAAA,CAAA,CAAb,CAAzB;QACE,GAAA,GAAM,KAAM,CAAA,CAAA;QACZ,OAAO,CAAC,GAAR,CAAY,aAAA,GAAc,GAA1B;QACA,OAAO,CAAC,GAAR,CAAY,uBAAA,GAAwB,SAApC;eACA,OAAA,CAAQ,GAAR,EAAa,SAAb,CAAuB,CAAC,IAAxB,CAA6B,SAAC,GAAD;iBAC3B,EAAE,CAAC,WAAH,CAAe,GAAf,CAAmB,CAAC,IAApB,CAAyB,SAAA;mBAAG;UAAH,CAAzB;QAD2B,CAA7B,EAJF;OAAA,MAAA;eAQE;UAAE,YAAA,UAAF;UARF;;IADK,CA1BH;IAsCJ,CAAC,CAAC,QAAF,GAAa,SAAC,QAAD;MACX,QAAQ,CAAC,UAAT,GAAsB;aACtB;IAFW;WAIb;EAhEQ;;EAkEV,MAAM,CAAC,OAAP,GAAiB;IAAE,SAAA,OAAF;;AA7FjB","file":"metal/extractors/7zip.js","sourceRoot":"/source/","sourcesContent":["\nPromise = require \"bluebird\"\nglob = Promise.promisify require \"glob\"\nfs = Promise.promisifyAll require \"fs\"\nfile_type = require \"file-type\"\nread_chunk = require \"read-chunk\"\npath = require \"path\"\nsevenzip = require \"node-7z\"\nHumanize = require \"humanize-plus\"\n\n# node-7z needs:\n#   - 7za.exe next to package.json on win32\n#   - 7za in $PATH on linux & darwin\n# For linux we'll just have to let users install p7zip-full\n# For OSX, the binary doesn't depend on any funky dynlibs so\n# we can just ship it with releases, but we need to amend the path here\nswitch process.platform\n  when \"darwin\"\n    process.env.PATH += ':.'\n\nnormalize = (p) ->\n  path.normalize p.replace /[\\s]*$/, \"\"\n\nis_tar = (file) ->\n  file_type(read_chunk.sync(file, 0, 262))?.ext == 'tar'\n\nVERY_VERBOSE = false\n\nextract = (archive_path, dest_path) ->\n  console.log \"Extracting archive '#{archive_path}' to '#{dest_path}' with 7-Zip\"\n\n  li = new sevenzip().list(archive_path)\n\n  sizes = {}\n  total_size = 0\n  extracted_size = 0\n\n  handlers = {\n    onprogress: null\n  }\n\n  li.progress((files) ->\n    console.log \"Got info about #{files.length} files\" if VERY_VERBOSE\n    for f in files\n      total_size += f.size\n      npath = normalize f.name\n      sizes[npath] = f.size\n      console.log \"#{npath} (#{f.size} bytes)\" if VERY_VERBOSE\n  )\n\n  p = li.then((spec) ->\n    console.log \"total extracted size: #{total_size}\"\n    # console.log \"spec = \\n#{JSON.stringify spec}\"\n\n    xr = new sevenzip().extractFull(archive_path, dest_path)\n    xr.progress((files) ->\n      console.log \"Got progress about #{files.length} files\" if VERY_VERBOSE\n      for f in files\n        npath = normalize f\n        if size = sizes[npath]\n          extracted_size += size\n          console.log \"#{npath} (#{size} bytes)\" if VERY_VERBOSE\n        else\n          console.log \"#{npath} (size not found)\" if VERY_VERBOSE\n      percent = Math.round(extracted_size / total_size * 100)\n      console.log \"Estimated progress: #{Humanize.fileSize extracted_size} of #{Humanize.fileSize total_size} bytes, ~#{percent}%\"\n      handlers.onprogress? {\n        extracted_size\n        total_size\n        percent\n      }\n    )\n\n    xr\n  ).then(->\n    glob(\"#{dest_path}/**/*\", nodir: true)\n  ).then((files) ->\n    if files.length == 1 and is_tar files[0]\n      tar = files[0]\n      console.log \"Found tar: #{tar}\"\n      console.log \"Whereas dest_path is #{dest_path}\"\n      extract(tar, dest_path).then((res) ->\n        fs.unlinkAsync(tar).then -> res\n      )\n    else\n      { total_size }\n  )\n\n  p.progress = (callback) ->\n    handlers.onprogress = callback\n    p\n\n  p\n\nmodule.exports = { extract }\n\n"]}