{"version":3,"sources":["metal/launcher.coffee"],"names":[],"mappings":"AACA;AAAA,MAAA;;EAAA,IAAA,GAAO,OAAA,CAAQ,MAAR;;EACP,aAAA,GAAgB,OAAA,CAAQ,eAAR;;EAChB,OAAA,GAAU,OAAA,CAAQ,UAAR;;EAEV,UAAA,GAAa,OAAA,CAAQ,sBAAR;;EAEb,EAAA,GAAK,SAAC,QAAD,EAAW,GAAX;WACC,IAAA,OAAA,CAAQ,SAAC,OAAD,EAAU,MAAV;AACV,UAAA;MAAA,OAAO,CAAC,GAAR,CAAY,KAAA,GAAM,GAAlB;MAGA,SAAA,GAAY,CAAC,GAAD,EAAM,IAAN;AACZ,WAAA,2CAAA;;QACE,IAAG,GAAG,CAAC,OAAJ,CAAY,MAAZ,CAAA,IAAuB,CAA1B;AACE,gBAAU,IAAA,KAAA,CAAM,8CAAA,GAA+C,GAArD,EADZ;;AADF;MAIA,EAAA,GAAK,IAAI,CAAC,OAAL,CAAa,QAAb;MACL,OAAO,CAAC,GAAR,CAAY,qBAAA,GAAsB,EAAlC;aACA,GAAA,GAAM,aAAa,CAAC,IAAd,CAAmB,GAAnB,EAAwB;QAC5B,KAAA,EAAO,CAAE,CAAF,EAAK,MAAL,EAAa,MAAb,CADqB;QAE5B,SAAA,EAAW,IAAA,GAAO,IAFU;QAG5B,GAAA,EAAK,EAHuB;OAAxB,EAIH,SAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB;QACD,IAAG,KAAH;UACE,OAAO,CAAC,GAAR,CAAe,QAAD,GAAU,YAAV,GAAsB,KAApC;UACA,OAAO,CAAC,GAAR,CAAY,UAAZ;UACA,OAAO,CAAC,GAAR,CAAY,MAAZ;UACA,OAAO,CAAC,GAAR,CAAY,UAAZ;UACA,OAAO,CAAC,GAAR,CAAY,MAAZ;iBACA,MAAA,CAAO;YAAE,UAAA,QAAF;YAAY,OAAA,KAAZ;WAAP,EANF;SAAA,MAAA;iBAQE,OAAA,CAAQ,eAAA,GAAgB,QAAhB,GAAyB,GAAjC,EARF;;MADC,CAJG;IAXI,CAAR;EADD;;EA2BL,MAAA,GAAS,SAAC,GAAD;WACP,GAAA,GAAM,GAAG,CAAC,OAAJ,CAAY,IAAZ,EAAkB,MAAlB,CAAN,GAAkC;EAD3B;;EAGT,MAAA,GAAS,SAAC,QAAD,EAAW,IAAX;AACP,QAAA;;MADkB,OAAK;;IACvB,OAAO,CAAC,GAAR,CAAY,aAAA,GAAc,QAAd,GAAuB,QAAvB,GAA+B,OAAO,CAAC,QAAvC,GAAgD,eAAhD,GAA8D,CAAC,IAAI,CAAC,IAAL,CAAU,GAAV,CAAD,CAA9D,GAA6E,GAAzF;IACA,UAAA,GAAa,IAAI,CAAC,GAAL,CAAS,SAAC,CAAD;aAAO,MAAA,CAAO,CAAP;IAAP,CAAT,CAA0B,CAAC,IAA3B,CAAgC,GAAhC;AAEb,YAAO,OAAO,CAAC,QAAf;AAAA,WAEO,QAFP;eAOI,EAAA,CAAG,QAAH,EAAa,UAAA,GAAU,CAAC,MAAA,CAAO,QAAP,CAAD,CAAV,GAA2B,UAA3B,GAAqC,UAAlD;AAPJ,WASO,OATP;AAAA,WASgB,OAThB;eAUI,EAAA,CAAG,QAAH,EAAe,CAAC,MAAA,CAAO,QAAP,CAAD,CAAA,GAAiB,GAAjB,GAAoB,UAAnC;AAVJ;QAcI,KAAA,GAAQ,OAAA,CAAQ,OAAR;QACR,KAAK,CAAC,QAAN,CAAe,QAAf;eACA,OAAO,CAAC,OAAR,CAAgB,SAAA,GAAU,QAAV,GAAmB,YAAnC;AAhBJ;EAJO;;EAsBT,MAAM,CAAC,OAAP,GAAiB;IAAE,QAAA,MAAF;;AA1DjB","file":"metal/launcher.js","sourceRoot":"/source/","sourcesContent":["\npath = require \"path\"\nchild_process = require \"child_process\"\nPromise = require \"bluebird\"\n\nAppActions = require \"./actions/AppActions\"\n\nsh = (exe_path, cmd) ->\n  new Promise (resolve, reject) ->\n    console.log \"sh #{cmd}\"\n\n    # pretty weak but oh well.\n    forbidden = [\";\", \"&&\"]\n    for bidden in forbidden\n      if cmd.indexOf(bidden) >= 0\n        throw new Error \"Command-line contains forbidden characters: #{cmd}\"\n\n    wd = path.dirname(exe_path)\n    console.log \"Working directory: #{wd}\"\n    exe = child_process.exec cmd, {\n      stdio: [ 0, 'pipe', 'pipe' ]\n      maxBuffer: 5000 * 1024\n      cwd: wd\n    }, (error, stdout, stderr) ->\n      if error\n        console.log \"#{exe_path} returned #{error}\"\n        console.log \"stdout: \"\n        console.log stdout\n        console.log \"stderr: \"\n        console.log stderr\n        reject { exe_path, error }\n      else\n        resolve \"Done playing #{exe_path}!\"\n\nescape = (arg) ->\n  '\"' + arg.replace(/\"/g, \"\\\\\\\"\") + '\"'\n\nlaunch = (exe_path, args=[]) ->\n  console.log \"launching '#{exe_path}' on '#{process.platform}' with args '#{args.join ' '}'\"\n  arg_string = args.map((x) -> escape(x)).join ' '\n\n  switch process.platform\n\n    when \"darwin\"\n      # '-W' waits for app to quit\n      # potentially easy to inject something into the command line\n      # here but then again we are running executables downloaded\n      # from the internet.\n      sh exe_path, \"open -W #{escape exe_path} --args #{arg_string}\"\n\n    when \"win32\", \"linux\"\n      sh exe_path, \"#{escape exe_path} #{arg_string}\"\n\n    else\n      # don't know how to launch, try to open with OS?\n      shell = require \"shell\"\n      shell.openItem(exe_path)\n      Promise.resolve \"Opened #{exe_path} in shell!\"\n\nmodule.exports = { launch }\n\n"]}